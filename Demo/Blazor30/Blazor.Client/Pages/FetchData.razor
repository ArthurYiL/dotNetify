@page "/fetchdata"
@using Blazor.Shared
@using DotNetify.Blazor;
@using Microsoft.AspNetCore.Components;
@inject IVMContext<FetchDataState> VMContext;

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<d-vm-context ref="vmContextRef" class="test" vm="FetchDataVM">
    @if (state == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in state.Forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</d-vm-context>

@functions {
    FetchDataState state;
    ElementRef vmContextRef;

    public class FetchDataState
    {
        public WeatherForecast[] Forecasts { get; set; }
    }

    protected override async Task OnAfterRenderAsync()
    {
        VMContext.StateChanged += (sender, e) =>
        {
            state = e;
            StateHasChanged();
        };
        await VMContext.InitAsync(vmContextRef);
    }
}