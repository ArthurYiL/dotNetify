@page "/fetchdata"
@using Blazor.Shared
@using DotNetify.Blazor;
@implements IDisposable
@inject IVMContext<FetchDataState> VMContext;

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

<d-vm-context ref="VMContext.ElementRef" vm="FetchData">
    @if (state == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Date</th>
                    <th>Temp. (C)</th>
                    <th>Temp. (F)</th>
                    <th>Summary</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var forecast in state.Forecasts)
                {
                    <tr>
                        <td>@forecast.Date.ToShortDateString()</td>
                        <td>@forecast.TemperatureC</td>
                        <td>@forecast.TemperatureF</td>
                        <td>@forecast.Summary</td>
                    </tr>
                }
            </tbody>
        </table>
    }
</d-vm-context>

@functions {
    FetchDataState state;

    class FetchDataState
    {
        public WeatherForecast[] Forecasts { get; set; }
    }

    protected override async Task OnAfterRenderAsync()
    {
        await VMContext.HandleStateChangedAsync((sender, e) => { state = e; StateHasChanged(); });
    }

    public void Dispose()
    {
        VMContext.Dispose();
    }
}